g++-4.8 -pedantic -std=c++11 -Wall -fprofile-arcs -ftest-coverage Collatz.c++ RunCollatz.c++ -o RunCollatz
./RunCollatz < RunCollatz.in > RunCollatz.tmp
diff RunCollatz.tmp RunCollatz.out
g++-4.8 -pedantic -std=c++11 -Wall -fprofile-arcs -ftest-coverage Collatz.c++ TestCollatz.c++ -o TestCollatz -lgtest -lgtest_main -pthread
valgrind ./TestCollatz                                       >  TestCollatz.tmp 2>&1
gcov-4.8 -b Collatz.c++     | grep -A 5 "File 'Collatz.c++'"     >> TestCollatz.tmp
gcov-4.8 -b TestCollatz.c++ | grep -A 5 "File 'TestCollatz.c++'" >> TestCollatz.tmp
cat TestCollatz.tmp
==21147== Memcheck, a memory error detector
==21147== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==21147== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==21147== Command: ./TestCollatz
==21147== 
Running main() from gtest_main.cc
[==========] Running 29 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 29 tests from CollatzFixture
[ RUN      ] CollatzFixture.read_1
[       OK ] CollatzFixture.read_1 (14 ms)
[ RUN      ] CollatzFixture.read_2
[       OK ] CollatzFixture.read_2 (2 ms)
[ RUN      ] CollatzFixture.read_3
[       OK ] CollatzFixture.read_3 (2 ms)
[ RUN      ] CollatzFixture.eval_1
[       OK ] CollatzFixture.eval_1 (3 ms)
[ RUN      ] CollatzFixture.eval_2
[       OK ] CollatzFixture.eval_2 (2 ms)
[ RUN      ] CollatzFixture.eval_3
[       OK ] CollatzFixture.eval_3 (2 ms)
[ RUN      ] CollatzFixture.eval_4
[       OK ] CollatzFixture.eval_4 (1 ms)
[ RUN      ] CollatzFixture.eval_5
[       OK ] CollatzFixture.eval_5 (1 ms)
[ RUN      ] CollatzFixture.eval_6
[       OK ] CollatzFixture.eval_6 (4 ms)
[ RUN      ] CollatzFixture.eval_7
[       OK ] CollatzFixture.eval_7 (1 ms)
[ RUN      ] CollatzFixture.eval_8
[       OK ] CollatzFixture.eval_8 (2 ms)
[ RUN      ] CollatzFixture.eval_9
[       OK ] CollatzFixture.eval_9 (4 ms)
[ RUN      ] CollatzFixture.print_1
[       OK ] CollatzFixture.print_1 (6 ms)
[ RUN      ] CollatzFixture.print_2
[       OK ] CollatzFixture.print_2 (2 ms)
[ RUN      ] CollatzFixture.print_3
[       OK ] CollatzFixture.print_3 (2 ms)
[ RUN      ] CollatzFixture.cycle_1
[       OK ] CollatzFixture.cycle_1 (1 ms)
[ RUN      ] CollatzFixture.cycle_2
[       OK ] CollatzFixture.cycle_2 (2 ms)
[ RUN      ] CollatzFixture.cycle_3
[       OK ] CollatzFixture.cycle_3 (1 ms)
[ RUN      ] CollatzFixture.cycle_4
[       OK ] CollatzFixture.cycle_4 (2 ms)
[ RUN      ] CollatzFixture.range_1
[       OK ] CollatzFixture.range_1 (1 ms)
[ RUN      ] CollatzFixture.range_2
[       OK ] CollatzFixture.range_2 (2 ms)
[ RUN      ] CollatzFixture.range_3
[       OK ] CollatzFixture.range_3 (3 ms)
[ RUN      ] CollatzFixture.range_4
[       OK ] CollatzFixture.range_4 (3951 ms)
[ RUN      ] CollatzFixture.cache_1
[       OK ] CollatzFixture.cache_1 (2 ms)
[ RUN      ] CollatzFixture.cache_2
[       OK ] CollatzFixture.cache_2 (1 ms)
[ RUN      ] CollatzFixture.cache_3
[       OK ] CollatzFixture.cache_3 (7 ms)
[ RUN      ] CollatzFixture.solve_1
[       OK ] CollatzFixture.solve_1 (7 ms)
[ RUN      ] CollatzFixture.solve_2
[       OK ] CollatzFixture.solve_2 (3 ms)
[ RUN      ] CollatzFixture.solve_3
[       OK ] CollatzFixture.solve_3 (3 ms)
[----------] 29 tests from CollatzFixture (4042 ms total)

[----------] Global test environment tear-down
[==========] 29 tests from 1 test case ran. (4067 ms total)
[  PASSED  ] 29 tests.
==21147== 
==21147== HEAP SUMMARY:
==21147==     in use at exit: 0 bytes in 0 blocks
==21147==   total heap usage: 683 allocs, 683 frees, 93,253 bytes allocated
==21147== 
==21147== All heap blocks were freed -- no leaks are possible
==21147== 
==21147== For counts of detected and suppressed errors, rerun with: -v
==21147== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
File 'Collatz.c++'
Lines executed:98.92% of 93
Branches executed:100.00% of 88
Taken at least once:65.91% of 88
Calls executed:54.55% of 44
Creating 'Collatz.c++.gcov'
File 'TestCollatz.c++'
Lines executed:100.00% of 103
Branches executed:59.62% of 634
Taken at least once:29.81% of 634
Calls executed:54.50% of 756
Creating 'TestCollatz.c++.gcov'
