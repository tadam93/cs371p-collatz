        -:    0:Source:Collatz.c++
        -:    0:Graph:Collatz.gcno
        -:    0:Data:Collatz.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// ----------------------------
        -:    2:// projects/collatz/Collatz.c++
        -:    3:// Copyright (C) 2016
        -:    4:// Glenn P. Downing
        -:    5:// ----------------------------
        -:    6:// Length estimate  15 hours
        -:    7:// Dates:
        -:    8://      Jan 27 - 1 hour
        -:    9://      Feb 1 - 3 hours
        -:   10:// --------
        -:   11:// includes
        -:   12:// --------
        -:   13:
        -:   14:#include <cassert>  // assert
        -:   15:#include <iostream> // endl, istream, ostream
        -:   16:#include <sstream>  // istringstream
        -:   17:#include <string>   // getline, string
        -:   18:#include <utility>  // make_pair, pair
        -:   19:
        -:   20:#include "Collatz.h"
        -:   21:
        -:   22:using namespace std;
        -:   23:
        -:   24:// ------------
        -:   25:// collatz_read
        -:   26:// ------------
        -:   27:
function _Z12collatz_readRKSs called 11 returned 100% blocks executed 80%
       11:   28:pair<int, int> collatz_read (const string& s) {
       11:   29:    istringstream sin(s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   30:    int i;
        -:   31:    int j;
       11:   32:    sin >> i >> j;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       11:   33:    return make_pair(i, j);
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -:   34:}
        -:   35:
        -:   36:// ------------
        -:   37:// collatz_eval
        -:   38:// ------------
        -:   39:
function _Z12collatz_evalii called 17 returned 100% blocks executed 75%
       17:   40:int collatz_eval (int i, int j) {
        -:   41:    //cout << "I:" << i << "\tJ:" << j << endl;
       17:   42:    assert(i > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       17:   43:    assert(i < 1000000);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       17:   44:    assert(j > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       17:   45:    assert(j < 1000000);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       17:   46:    if(i > j){
branch  0 taken 18% (fallthrough)
branch  1 taken 82%
        3:   47:        int temp = i;
        3:   48:        i = j;
        3:   49:        j = temp;
        -:   50:    }
       17:   51:    int max_cycle = 1;
     3191:   52:    while(i <= j){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   53:        //cout << "I: " << i << endl;
     3157:   54:        int curr_cycle = collatz_cycle_length(i);
call    0 returned 100%
     3157:   55:        if(curr_cycle > max_cycle){
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
       85:   56:            max_cycle = curr_cycle;
        -:   57:        }
     3157:   58:        i++;
        -:   59:    }
       17:   60:    assert (max_cycle > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       17:   61:    return max_cycle;
        -:   62:}
        -:   63:
        -:   64:
        -:   65:// -------------
        -:   66:// collatz_cycle_length
        -:   67://  Takes in a number and finds the cycle length based on the collatz formula
        -:   68:// int i: the number whose cycle length is desired
        -:   69:// return int: the cycle length
        -:   70:// -------------
function _Z20collatz_cycle_lengthi called 3161 returned 100% blocks executed 79%
     3161:   71:int collatz_cycle_length(int i){
        -:   72:    //cout << "I:" << i << endl;
     3161:   73:    assert(i > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
     3161:   74:    assert(i < 1000000);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
     3161:   75:    int count = 1;
   210403:   76:    while (i > 1){
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
   204081:   77:        if ((i % 2) == 0){
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
   136645:   78:            i = (int)(i / 2);
        -:   79:        }else{
    67436:   80:            i = (3 * i) + 1;
        -:   81:        }
   204081:   82:        count++;
        -:   83:    }
     3161:   84:    assert(count > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
     3161:   85:    return count;
        -:   86:}
        -:   87:
        -:   88:// -------------
        -:   89:// collatz_print
        -:   90:// -------------
        -:   91:
function _Z13collatz_printRSoiii called 11 returned 100% blocks executed 100%
       11:   92:void collatz_print (ostream& w, int i, int j, int v) {
       11:   93:    w << i << " " << j << " " << v << endl;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
       11:   94:}
        -:   95:
        -:   96:// -------------
        -:   97:// collatz_solve
        -:   98:// -------------
        -:   99:
function _Z13collatz_solveRSiRSo called 3 returned 100% blocks executed 80%
        3:  100:void collatz_solve (istream& r, ostream& w) {
        3:  101:    string s;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       14:  102:    while (getline(r, s)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 73%
branch  7 taken 27% (fallthrough)
        8:  103:        const pair<int, int> p = collatz_read(s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        8:  104:        const int            i = p.first;
        8:  105:        const int            j = p.second;
        8:  106:        const int            v = collatz_eval(i, j);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        8:  107:        collatz_print(w, i, j, v);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        3:  108:    }
call    0 returned 100%
call    1 never executed
function _GLOBAL__sub_I__Z12collatz_readRKSs called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        6:  109:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
